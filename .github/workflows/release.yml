name: Build and Release .NET Core Console App

on:
  push:
    branches:
      - master  # Trigger on push to master branch (you can change this to any branch you prefer)

jobs:
  build:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up .NET SDK (to build the .NET Core app)
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'  # Specify the version of .NET Core SDK you want to use

      # Step 3: Restore dependencies (to install any required NuGet packages)
      - name: Restore dependencies
        run: dotnet restore

      # Step 4: Build the .NET Core application (this step compiles the app)
      - name: Build the project
        run: dotnet build --configuration Release --no-restore

      # Step 5: Publish the application (create a deployable artifact)
      - name: Publish the project
        run: dotnet publish --configuration Release --no-build --output ./publish

  release:
    runs-on: ubuntu-latest
    needs: build  # This job will run after the build job succeeds

    steps:
      # Step 1: Checkout the code again (in case release depends on latest state)
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Get current version (using Git tag or commit SHA)
      - name: Get current version (Git tag or commit SHA)
        id: get_version
        run: |
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$VERSION" ]; then
            VERSION="commit-${GITHUB_SHA}"  # Use commit SHA if no tag exists
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 3: Create a GitHub release
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.VERSION }}  # Tag name will be the version we just defined
          release_name: Release ${{ env.VERSION }}  # Release name (can customize)
          body: Release description here  # You can add release notes here
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub's token to authenticate API requests

      # Step 4: Upload the published files to GitHub release
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./publish/*  # Path to the files generated in the publish step
          asset_name: myapp.zip  # The name of the file being uploaded (you can change it)
          asset_content_type: application/zip  # The content type of the asset (in this case, zip)

      # Optional: You can create a .zip file for your release assets if you prefer
      - name: Create ZIP file for release
        run: |
          cd publish
          zip -r myapp.zip .  # Create a ZIP archive of the publish directory
          ls -R  # List contents for debug purposes
